@startuml Analyzer

class AnalyzerManager

together {
    class MemoryUsageDiffTask
    class Task
}
together {
    class MemoryUsageDiffExecutor
    class AnalysisItemExecutor
}
together {
    class OsMetric
    class DsaTelemetry
    interface Dataset
}
class Result

class MemoryUsageDiffTask implements Task

class MemoryUsageDiffExecutor implements AnalysisItemExecutor

class OsMetric implements Dataset
class DsaTelemetry implements Dataset

AnalyzerManager --> Result:use
AnalyzerManager --> OsMetric:use
AnalyzerManager --> DsaTelemetry:use
AnalyzerManager --> MemoryUsageDiffTask:use
AnalyzerManager --> MemoryUsageDiffExecutor:use

class AnalyzerManager {
    WORKITEM_QUEUES:dict="{'MemoryUsageDiff':queue}"
    _save_destination_config:dict
    _analysis_task_config:dict

    trigger_workers():void
    create_tasks_by_config(data_uuid:string,_analysis_task_config:dict):void
    _add_workitem_to_queue(process_name,metric_name,dataset_nametaset,analysis_item_name,analysis_upper_boundary,analysis_lower_boundary):void
    _run_task(Task):Result
    _get_queue_by_analysis_item_name(analysis_item_name):queue
    _get_task_by_klass(analysis_item_name):Task
    _get_executor_by_klass(analysis_item_name):AnalysisItemExecutor
    _get_dataset_by_klass(dataset_name,metric_name,dataset_start_time,dataset_end_time):Dataset
    _save_result(Result):void
}

class MemoryUsageDiffTask {
    analysis_item_name():String="MemoryUsageDiff"
}

class MemoryUsageDiffExecutor {
    + analysis_upper_boundary:integer
    + analysis_lower_boundary:integer
    + dataset:dataframe
    + _result:Result

    run():_result
}

interface AnalysisItemExecutor{
    _result():String="no result yet"

    {abstract}run():void
    get_result:_result
}

interface Task {
    + process_name:string
    + metric_name:string
    + datataset_name:string
    + dataset_start_time:datetime
    + dataset_end_time:datetime
    + analysis_upper_boundary:integer
    + analysis_lower_boundary:integer
    + _task:Task
    
    + __init__(process_name,metric_name,datataset_name,dataset_start_time,dataset_end_time,analysis_upper_boundary,analysis_lower_boundary):void
    + create():_task
    + get():_task
     - _verify_parameters():bool
    + {abstract}analysis_item_name():string
}

class Result {

}

interface Dataset {
    {abstract}datasource_path():void <<property>>
    
    metric():void <<property>>
    start_time():void <<property>>
    end_time():void <<property>>

    metric(val:string):void <<setter>>
    start_time(val:datetime):void <<setter>>
    end_time(val:datetime):void <<setter>>

    load():void
    {abstract}filter():void
}

class OsMetric {
    datasource_path:String
    
    datasource_path():String
    filter():dataframe
}

class DsaTelemetry {
    datasource_path:String
    
    datasource_path():String
    filter():dataframe
}

@enduml